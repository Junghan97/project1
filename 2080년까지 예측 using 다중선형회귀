import cx_Oracle
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import matplotlib

# 한글 폰트 설정 (Windows에서 사용하는 예시, 다른 OS는 폰트 경로에 맞게 수정 필요)
matplotlib.rcParams['font.family'] = 'Malgun Gothic'  # Windows에서 Malgun Gothic 사용
matplotlib.rcParams['axes.unicode_minus'] = False  # 마이너스 기호 깨짐 방지

# Oracle 데이터베이스에 연결 (환경에 맞게 사용자명, 비밀번호, 호스트, SID 설정)
dsn_tns = cx_Oracle.makedsn('localhost', '1521', service_name='xe')
connection = cx_Oracle.connect(user='junbae', password='junbae', dsn=dsn_tns)

# SQL 쿼리 실행 (컬럼명 영어로 변경)
query = """
SELECT
    연도,
    총인구,
    성비,
    인구성장률,
    노인인구,
    노령화지수,
    독거노인수
FROM
    elder_data1
WHERE
    연도 BETWEEN 2000 AND 2023
"""
df = pd.read_sql(query, connection)

# 연결 종료
connection.close()

# 결측값 처리 (예: 결측값을 평균으로 채운다)
df.fillna(df.mean(), inplace=True)

# 필요한 열만 선택
features = ['연도', '총인구', '성비', '인구성장률', '노인인구', '노령화지수']
target = '독거노인수'

# X (입력 변수)와 y (타겟 변수)로 나누기
X = df[features]
y = df[target]

# 데이터 나누기 (훈련용과 테스트용)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 다중 선형 회귀 모델
model = LinearRegression()
model.fit(X_train, y_train)

# 예측 수행
y_pred = model.predict(X_test)

# 2024년부터 2080년까지 예측을 위한 데이터 준비
future_years = np.arange(2024, 2081)  # 2024년부터 2080년까지

# 기존 데이터의 연도, 총인구, 성비 등 값을 사용하여 예측
future_data = {
    '연도': future_years,
}

# 2015년부터 2023년까지 데이터를 기반으로 각 특성의 평균 변화를 사용하여 예측값 계산
# 예시로 2015년부터 2023년까지의 평균 변화율을 기반으로 2024년 이후 예측

avg_changes = {
    '총인구': df['총인구'].pct_change().mean(),
    '성비': df['성비'].pct_change().mean(),
    '인구성장률': df['인구성장률'].pct_change().mean(),
    '노인인구': df['노인인구'].pct_change().mean(),
    '노령화지수': df['노령화지수'].pct_change().mean(),
}

# 2023년 데이터를 기반으로 예측하기 위해 마지막 데이터를 사용
last_year_data = df.iloc[-1]  # 2023년 데이터

# 미래 데이터를 생성 (변화율을 적용하여)
future_data['총인구'] = last_year_data['총인구'] * (1 + avg_changes['총인구']) ** (future_years - 2023)
future_data['성비'] = last_year_data['성비'] * (1 + avg_changes['성비']) ** (future_years - 2023)
future_data['인구성장률'] = last_year_data['인구성장률'] * (1 + avg_changes['인구성장률']) ** (future_years - 2023)
future_data['노인인구'] = last_year_data['노인인구'] * (1 + avg_changes['노인인구']) ** (future_years - 2023)
future_data['노령화지수'] = last_year_data['노령화지수'] * (1 + avg_changes['노령화지수']) ** (future_years - 2023)

# DataFrame으로 변환
future_df = pd.DataFrame(future_data)

# 다중 선형 회귀 모델을 사용하여 예측
future_predictions = model.predict(future_df)

# 원래 데이터의 독거노인수 (2000~2023년)
original_years = df['연도']
original_predictions = df['독거노인수']

# 원래 데이터와 예측 데이터를 결합하여 테이블 생성
all_years = np.concatenate([original_years, future_years])  # 2000~2080년
all_predictions = np.concatenate([original_predictions, future_predictions])  # 실제 + 예측 독거노인수

# 전체 데이터를 데이터프레임으로 결합
full_table = pd.DataFrame({
    '연도': all_years,
    '독거노인수': all_predictions
})

# 테이블 출력
display(full_table)

# 예측된 독거노인수를 시각화
plt.plot(future_years, future_predictions, label="예측된 독거노인수", color='blue')
plt.scatter(original_years, original_predictions, color='red', label="실제 독거노인수", marker='x')

# 그래프 설정
plt.xlabel("연도")
plt.ylabel("독거노인수")
plt.title("다중선형회귀를 통한 독거노인수 예측 (2000-2080)")
plt.grid(True)
plt.legend()
plt.show()
